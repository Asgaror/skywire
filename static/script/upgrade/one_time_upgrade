#!/bin/bash

# SkyWire upgrader script
#
# based on the previous work of [TBD]
# Author: stdevPavelmc / dev0032@simelo.tech 
# 
# Main goal is:
# - Gather information about the network, standard or custom IP config?
# - Generate ssh id on the server and copy it to every client
# - Install NTP in the manager and on every node, get sure we have a correct time
# # for the manger
# - gather key from the Api [bogus, elaborate]
# - Fix OS scripts on manager
# - kill manager/node instances
# - Upgrade skywire
# - Setup systemd jobs & start them
# # do the same on every node
# 

echo "#########################################################################"
echo "### Skyminer cluster upgrade, please read every text dialog an choose ###"
echo "### the right option, keep a notebook and pencil to take notes when   ###"
echo "### instructed to if necessary.                                       ###"
echo "#########################################################################"

# vars
MANAGER_IP="192.168.0.2"
NODES_IPS="192.168.0.3 192.168.0.4 192.168.0.5 192.168.0.6 192.168.0.7 192.168.0.8 192.168.0.9"
MANAGER_n_NODE='yes'
ROOT=`pwd`

# get the local IP, will assume eth0 as the net device
# TODO update this
function get_local_ip() {
    echo "192.168.0.2"
}


# generic dialog STOP / NEXT
function dialog_host_stop_next() {
    # argument is as follows
    #
    # 1 - node we are working on
    # 2 - title of the dialog
    # 3 - text onf the dialog will append instruction

    local node=${1}
    local title=${2}
    local text=${3}
    
    if (whiptail --backtitle "Skywire Upgrade" --title "${title}" --yesno "${text}\n\nTo stop now and verify node $node, press the STOP button.\n\nOtherwise continue with the next node by pressing NEXT and retry after you have verified your node by re-running the script and choosing the Retry Node option" --yes-button "[NEXT]" --no-button "[STOP]" 20 60 3>&1 1>&2 2>&3); then
        echo "User selected NEXT, exit status was $?. Upgrade will continue with the next node."	
    else
        echo "User selected STOP, exit status was $?. Upgrade will stop now."
        exit
    fi
}


# operation is ok
function dialog_host_unreachable() {
    # argument is as this:
    #
    # 1 - node we are working on
    # 2 - title of the dialog (will append STOP/NEXT text)

    dialog_host_stop_next "$1" "$2" "The host $1 cannot be reached, please verify that the node is online and retry the script."
}


# advice dialog, just ok 
function dialog_advice() {
    # A informative dialog with just ok
    # parameters are as follow:
    #
    # 1 - title
    # 2 - text

    whiptail --backtitle "Skywire Upgrade" --title "$1" --msgbox "$2\n\nPress OK to continue." \
        --ok-button "[OK]" 15 60 3>&1 1>&2 2>&3
}


# main notice
function main_notice() {
    dialog_advice "Skywire software upgrade" "This script is intended to guide you through the Skywire Web UI upgrade process for the official miners that uses the official images.\n\nRead each step carefully as it will explain each step and may ask you for an input."
} 


# get network info
function get_network_info() {
    # default or custom
    local OPT=`whiptail --backtitle "Skywire Upgrade" --title "Used IPs" --menu "Are you using the default IPs from the official images or you changed the default IPs on the Skywire nodes?\n\nNavigate with UP & DOWN arrow keys. To jump on OK use TAB key and press ENTER to select." --ok-button "[OK]" 20 70 4 \
	"Exit upgrade:" "Exit this upgrade." \
	"Default IPs:" "I am using the default image IPs." \
	"Custom IPs:" "I am using a custom set of IPs." \
	"Retry a Node:" "I verified my node and I want to upgrade" 3>&1 1>&2 2>&3`
    exitstatus=$?

    # exit by choice
    if [ $exitstatus -ne 0 ] ; then
        dialog_advice "Exit" "You selected [CANCEL], bye."
        echo ""
        echo "Exit by users choice"; exit 1
    fi

    # switch on each case
    case "${OPT}" in
        "Exit upgrade:")
            # exit
            dialog_advice "Exit upgrade" "You selected Cancel, bye."
            echo ""
            echo "Exit by users choice"; exit 1
        ;;

        "Default IPs:")
            # defaults ip, it users the IP on the environment
            # no more to see here
            echo ""
            echo "The IPs set are the default ones:"
            echo "    Manager: $MANAGER_IP"
            echo "    Nodes: $NODES_IPS"
        ;;

        "Custom IPs:")
            # need to catch manager and nodes IP and set it on the env vars

            # get it
            nodes=$(whiptail --backtitle "Skywire Upgrade" --title "Custom IPs - Enter IPs" --inputbox "Enter only the nodes IPs that have been changed separated by space.\nPLEASE: DO NOT ENTER THE MANAGER IP!"  --ok-button "[OK]" --cancel-button "[CANCEL]" 16 70 3>&1 1>&2 2>&3)
            exitstatus=$?

            # user cancels
            if [ ! $exitstatus -eq 0 ]; then
                whiptail --backtitle "Skywire Upgrade" --title "Custom IPs - Enter IPs" --msgbox "You selected Cancel. Press OK to get out." --ok-button "[OK]" 15 60 3>&1 1>&2 2>&3
                echo ""
                echo "Exit status was $exitstatus"; exit 1
            fi

            # manager IP is local IP
            MANAGER_IP=`get_local_ip`
            NODES_IPS=${nodes}

            # feedback
            echo ""
            echo "Your IPs set is this:"
            echo "    Manager: $MANAGER_IP"
            echo "    Nodes: $NODES_IPS"
        ;;

        "Retry a Node:")
            # work on just a node

            # get it
            nodes=$(whiptail --backtitle "Skywire Upgrade" --title "Retry a node - Enter IPs" --inputbox "Enter only the IP of the node you want to upgrade."  --ok-button "[OK]" --cancel-button "[CANCEL]" 16 70 3>&1 1>&2 2>&3)
            exitstatus=$?

            # user cancels
            if [ ! $exitstatus -eq 0 ]; then
                dialog_advice "Custom IPs - Enter IPs" "You selected Cancel, bye"
                echo ""
                echo "Exit status was $exitstatus"; exit 1
            fi

            # manager IP is local IP
            MANAGER_IP=`get_local_ip`
            NODES_IPS=${nodes}

            echo ""
            echo "Your will upgrade just a node:"
            echo "    Node: $NODES_IPS"

            # rise flag
            MANAGER_n_NODE='no'
        ;;
    esac
}


# # generate manager ssh key and copy it to the nodes
function manager_ssh_key_distribution() {
    # advice, generate the key, iterate over the nodes and push it.
    # we will use the manager as a regular node, this has its advanteges

    # advice
    dialog_advice "Manager - SSH key generation" "Creating the ssh rsa key on the manager node $MANAGER_IP for passwordless login."

    # log 
    echo "Creating the ssh rsa key on the manager node $MANAGER_IP for passwordless login."

    ssh-keygen -t rsa -N '' -f /root/.ssh/id_rsa -C "$MANAGER_IP";
    exitstatus=$?

    # verify
    if [ $exitstatus -eq 0 ]; then
        echo "Manager rsa key created."
    else
        echo "Could not create the manager rsa key. Upgrade will stop now.";
        exit
    fi

    echo "## Starting to copy the rsa key of the manager node to the nodes ##"

    local NODES="${MANAGER_IP} ${NODES_IPS}"

    # iterate over the node/s
    for node in ${NODES}; do
        echo "Verify that the node $node is online by pinging."
        ping -W1 -c3 -i0.5 $node 2>&1
        
        if [ $? -ne 0 ] ; then
            dialog_host_unreachable "$node" "SSH key distribution - ssh-copy-id"
        else
            # log
            echo "Ping reply received from" $node
            echo "Copying the rsa key of the manager node to it:"

            # feedback
            dialog_advice "SSH key distribution - ssh-copy-id" "The node $node is reachable. Start copying the rsa key of the manager node to it.\n\nYou'll now be prompted to enter the root user password for authentication on the remote node. Press OK to continue and enter the root password, default is 'samos' or use the password you set if you changed it."
            
            ssh-copy-id -i /root/.ssh/id_rsa.pub "root@$node"
            exitstatus=$?

            if [ $exitstatus -eq 0 ]; then
                # log
                echo "Copied the manager rsa key on node $node."
            else
                dialog_host_stop_next "${node}" "SSH key distribution - ssh-copy-id" "Could not copy the manager rsa key on node $node."
            fi
        fi
    done
}


# install ntp server to fix date/time issues
function install_ntp() {
    # install NTP on the manager &/|| nodes
    # will handle the manager as a simple node via ssh

    local NODES="${NODES_IPS}"
    if [ "$MANAGER_n_NODE" == "yes" ] ; then
        # add the manager to the nodes pool
        NODES="${MANAGER_IP} ${NODES}"
    fi

    # advice
    dialog_advice "OS Software Upgrade - Installing NTP" "Now we will update and upgrade the node OS software, and will install NTP to get rid of the side effects of not having an RTC onboard."
     
    # iterate over the clients installing ntp on every one
    for node in ${NODES}; do
        echo "Verify that the node $node is online by pinging."
        ping -W1 -c3 -i0.5 $node 2>&1
        exitstatus=$?

        if [ $exitstatus -ne 0 ]; then
            # log
            echo "Node $node is not online"

            # user info
            dialog_host_unreachable "${node}" "Base Software Upgrade - Installing NTP"
        else
            # log
            echo "Ping reply received from" $node
            echo "Upgrading node $node & install NTP"

            # user info
            dialog_advice "Base Software Upgrade - apt-get + ntp" "The node $node is reachable. Start the system upgrade + ntp install; this may take a while"

            # run it
            ssh "root@$node" "apt update && apt upgrade -y && apt install ntp -y"
            exitstatus=$?

            if [ $exitstatus -eq 0 ] ; then
                # log
                echo "Node $node upgraded and ntp installed."
            else
                # log
                echo "Troubles upgrading and installing ntp"

                # user info
                dialog_host_stop_next "${node}" "Base Software Upgrade - apt-get + ntp" "Could not upgrade sysytem on node $node or install ntp."
            fi
        fi
    done
}


# change to systemd
function change_to_systemd() {
    # original images has GIT_SSL_NO_VERIFY in rc.local
    # also the call to the start up script is in rc.local
    # but we will use systemd jobs. 

    local NODES="${NODES_IPS}"
    if [ "$MANAGER_n_NODE" == "yes" ] ; then
        # add the manager to the nodes pool
        NODES="${MANAGER_IP} ${NODES}"
    fi

    # log
    echo "Upgrade startup scripts"

    # userinfo
    dialog_advice "Upgrade startup scripts - change to systemd" "Previous versions used a old unix startup technique and introduced potential bugs, now we will switch to the state of the art: systemd"

    # iterate over the clients
    for node in ${NODES} ; do
        echo "Verify that the node $node is online by pinging."
        ping -W1 -c3 -i0.5 -q $node 2>&1
        exitstatus=$?

        if [ $exitstatus -ne 0 ] ; then
            # log
            echo "Node $node is not online"

            # user info
            dialog_host_unreachable "${node}" "Upgrade startup scripts - change to systemd"
        else
            # log
            echo "Ping reply received from $node"
            echo "Upgrading startup scripts in node $node"

            # user info
            dialog_advice "Upgrade startup scripts - change to systemd" "We will copy the scripts now to node $node"

            # rc.local
            echo "Copy rc.local to node: $node"
            scp "${ROOT}/data/rc.local" "root@${node}:/etc/"
            exitstatus=$?

            if [ $exitstatus -ne 0 ] ; then
                echo "Error with the copy of rc.local to node $node"
                dialog_host_stop_next "${node}" "Upgrade startup scripts - copy rc.local" \
                    "Could not copy the file skywire-manager.service to the node $node"
            fi

            # systemd units
            if [ "$node" == "${MANAGER_IP}" ] ; then
                # copy manager unit    
                # skywire-manager.service
                echo "Copy systemd unit to Manager: $node"
                scp "${ROOT}/data/skywire-manager.service" "root@${node}:/etc/systemd/system/"
                exitstatus=$?

                if [ $exitstatus -ne 0 ] ; then
                    dialog_host_stop_next "${node}" "Upgrade startup scripts - copy systemd unit" \
                        "Could not copy the file skywire-manager.service to the node $node"
                fi

                # install service
                echo "Install skywire manager service"
                ssh "root@${node}" "sudo systemctl enable skywire-manager.service"
                exitstatus=$?

                if [ $exitstatus -ne 0 ] ; then
                    dialog_host_stop_next "${node}" "Upgrade startup scripts - install systemd unit" \
                        "Could not enable skywire-manager.service on the node $node"
                fi
            else
                # copy node unit 
                # skywire-node.service
                echo "Copy systemd unit to Node: $node"
                scp "${ROOT}/data/skywire-node.service" "root@${node}:/etc/systemd/system/"
                exitstatus=$?

                if [ $exitstatus -ne 0 ] ; then
                    dialog_host_stop_next "${node}" "Upgrade startup scripts - copy systemd unit" \
                        "Could not copy the file skywire-node.service to the node $node"
                fi

                # install service
                echo "Install skywire node service"
                ssh "root@${node}" "sudo systemctl enable skywire-node.service"
                exitstatus=$?

                if [ $exitstatus -ne 0 ] ; then
                    dialog_host_stop_next "${node}" "Upgrade startup scripts - install systemd unit" \
                        "Could not enable skywire-node.service on the node $node"
                fi
            fi
        fi
    done
}


# collect all keys in the master to preserve it
function collect_keys() {
    # Collecting the public keys of the nodes connected to the manager 

    # log
    echo "Collecting the public keys of the nodes connected to the manager"

    # user info
    dialog_advice "Collecting public keys - info" "Collecting the public keys of the nodes connected to the manager node for further use in case they change"
    
    # get it
    curl http://${MANAGER_IP}:8000/conn/getAll > dikeys;
    exitstatus=$?

    if [ $exitstatus -eq 0 ] ; then
        echo ""
		echo "Found the following public keys of the online nodes:"

        allkeys=`sed -i 's/\(\([^,]\+,\)\{6\}\)/\1\n/g;s/,\n/\n/g' dikeys && sed -e 's/\(^.*key":"\)\(.*\)\(","typ.*$\)/\2/' dikeys`

        for dikeys in ${allkeys}; do
			echo $dikeys
		done

	else
		echo "Could not find any node connected to the manager node. The upgrade will stop now, check if the nodes are online and retry the upgrade script."

        dialog_advice "Collecting public keys - No keys?" "There is no keys, so there is no nodes connected to this manager; script will stop, check your node and try again."
        exit
	fi
}


# stop managers and nodes
function stop_apps() {
    # will search in each node (including manager) and stop all 
    # instances of managers/nodes

    local NODES="${NODES_IPS}"
    if [ "$MANAGER_n_NODE" == "yes" ] ; then
        # add the manager to the nodes pool
        NODES="${MANAGER_IP} ${NODES}"
    fi

    # log
    echo "Stoping all instances of managers and nodes"

    # user info
    dialog_advice "Stop processes - killall" "Now we will search for manager and nodes instances on every node and will stop them in preparation for the real upgrade."

    # iterate over the clients 
    for node in ${NODES}; do
        echo "Verify that the node $node is online by pinging."
        ping -W1 -c3 -i0.5 -q $node 2>&1
        exitstatus=$?

        if [ $exitstatus -ne 0 ] ; then
            # log
            echo "Node $node is not online"

            # user info
            dialog_host_unreachable "${node}" "Stop processes - killall"
        else
            # log
            echo "Ping reply received from $node"
            echo "Stoping services in node $node"

            # user info
            dialog_advice "Stop processes - killall" "Will stop services on node ${node}."
            
            # Copy the killall script
            echo "Copy the assasin script to $node"
            scp "${ROOT}/data/killall.sh" "root@${node}:/tmp/"
            exitstatus=$?

            if [ $exitstatus -ne 0 ] ; then
                dialog_host_stop_next "${node}" "Stop processes - copy assasin script" \
                    "Could not copy the assasin script to $node"
            fi

            # hire the assasin script
            echo "Running the assasin script to $node"
            ssh "root@${node}" "chmod +x /tmp/killall.sh && /tmp/killall.sh"
            exitstatus=$?

            if [ $exitstatus -ne 0 ] ; then
                dialog_host_stop_next "${node}" "Stop processes - running assasin script" \
                    "Assassin script failed to stop processes on $node"
            fi            
        fi
    done
}


# upgrade skywire
function upgrade_skywire() {
    # upgrade skywire, this will be made via a script
    # it's located on ./data/upsky.sh

    local NODES="${NODES_IPS}"
    if [ "$MANAGER_n_NODE" == "yes" ] ; then
        # add the manager to the nodes pool
        NODES="${MANAGER_IP} ${NODES}"
    fi

    # log
    echo "Upgrading skywire..."

    # user info
    dialog_advice "Upgrading skywire - setup" "We will iterate over each node (even manager) upgrading every one of it."

    # iterate over the clients 
    for node in ${NODES}; do
        echo "Verify that the node $node is online by pinging."
        ping -W1 -c3 -i0.5 -q $node 2>&1
        exitstatus=$?

        if [ $exitstatus -ne 0 ]; then
            # log
            echo "Node $node is not online"

            # user info
            dialog_host_unreachable "${node}" "Upgrading skywire - offline node"
        else
            # log
            echo "Ping reply received from $node"
            echo "Upgrade start now for $node"

            # user info
            dialog_advice "Upgrading skywire - git pull" "Upgrading skywire node ${node}."
            
            # copy script
            echo "Copy upgrade script to: $node"
            scp "${ROOT}/data/upsky.sh" "root@${node}:/tmp/"
            exitstatus=$?

            if [ $exitstatus -ne 0 ] ; then
                dialog_host_stop_next "${node}" "Upgrading skywire - copy script" \
                    "Could not copy the upgrade script to $node"
            fi

            # run script
            echo "Upgrading node: $node"
            ssh "root@${node}" "/tmp/upsky.sh"
            exitstatus=$?

            if [ $exitstatus -ne 0 ] ; then
                dialog_host_stop_next "${node}" "Upgrading skywire - run update" \
                    "Update script on $node failed."
            fi

            # restart services
            echo "Starting services on $node"
            if [ "$node" == "$MANAGER_IP" ] ; then
                # start node
                ssh "root@${node}" "systemctl start skywire-manager && systemctl status skywire-manager"
                exitstatus=$?
            else
                # start node
                ssh "root@${node}" "systemctl start skywire-node && systemctl status skywire-node"
                exitstatus=$?
            fi

            if [ $exitstatus -ne 0 ] ; then
                dialog_host_stop_next "${node}" "Upgrading skywire - starting services" \
                    "Start of services on node $node failed."
            fi
        fi
    done
}


# check for key node changes and repair
function check_repair_keys() {
    # iterate and check for every saved keys

    # log
    echo "Now we will check the keys of the nodes and repair them if needed"

    # user info
    dialog_advice "Upgrading skywire - post upgrade" "Checking the keys of the nodes and fixing them is needed"

    # iterate over the keys on the file
    count=0 
    for dikeys in $(sed -i 's/\(\([^,]\+,\)\{6\}\)/\1\n/g;s/,\n/\n/g' dikeys && sed -e 's/\(^.*key":"\)\(.*\)\(","typ.*$\)/\2/' dikeys); do
        # catching the keys
        dikey[c++]="$dikeys";
        dikey1="${dikey[0]}"
        dikey2="${dikey[1]}"
        dikey3="${dikey[2]}"
        dikey4="${dikey[3]}"
        dikey5="${dikey[4]}"
        dikey6="${dikey[5]}"
        dikey7="${dikey[6]}"
        dikey8="${dikey[7]}"
    done

    # build key chain
    dik="$dikey1 $dikey2 $dikey3 $dikey4 $dikey5 $dikey6 $dikey7 $dikey8"

    # set env vars
    json0="/root/.skywire/node/keys.json"
    json1="/usr/local/skywire/go/bin/.skywire/node/keys.json"
    json="$json0 $json1"

    

} 



# main function
function main() {
    # show the main notice
    main_notice

    # get network info
    get_network_info

    # generate manager ssh key and copy it to the nodes
    manager_ssh_key_distribution

    # install ntp server to fix date/time issues
    install_ntp

    # change to systemd 
    change_to_systemd

    # collect keys
    collect_keys

    # stop all
    stop_apps

    # upgrade the nodes
    upgrade_skywire

    # check for key node changes and repair
    check_repair_keys
}

# the fun goes here
main